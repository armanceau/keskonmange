import { useState } from "react";
import TagSelector from "./components/TagSelector";
import IngredientInput from "./components/ingredient-input/IngredientInput";
import "./assets/style.css";
import ButtonCopyPaste from "./components/ButtonCopyPaste";
import FilterSection from "./components/filter-section/FilterSection";
import IngredientSummary from "./components/ingredient-summary/IngredientSummary";

type ParsedRecipe = {
  title: string;
  time: string;
  ingredients: string[];
  steps: string[];
  tips: string[];
};

const parseRecipe = (text: string): ParsedRecipe => {
  const titleMatch = text.match(/Titre de la recette\s*:\s*(.+)/);
  const timeMatch = text.match(/Temps de pr√©paration\s*:\s*(.+)/);

  const ingredientsMatch = text.match(
    /Ingr√©dients\s*:\s*([\s\S]*?)√âtapes de la pr√©paration\s*:/
  );
  const stepsMatch = text.match(
    /√âtapes de la pr√©paration\s*:\s*([\s\S]*?)Astuces\s*:/
  );
  const tipsMatch = text.match(/Astuces\s*:\s*([\s\S]*)/);

  return {
    title: titleMatch?.[1]?.trim() || "",
    time: timeMatch?.[1]?.trim() || "",
    ingredients:
      ingredientsMatch?.[1]
        ?.trim()
        .split("\n")
        .filter(Boolean)
        .map((i) => i.replace(/^[-‚Äì‚Ä¢*]\s*/, "")) || [],
    steps:
      stepsMatch?.[1]
        ?.trim()
        .split("\n")
        .filter(Boolean)
        .map((s) => s.replace(/^\d+\.\s*/, "")) || [],
    tips:
      tipsMatch?.[1]
        ?.trim()
        .split("\n")
        .filter(Boolean)
        .map((t) => t.replace(/^[-‚Äì‚Ä¢*]\s*/, "")) || [],
  };
};

const App = () => {
  const [ingredients, setIngredients] = useState<string[]>([]);
  const [loading, setLoading] = useState(false);
  const [recipe, setRecipe] = useState<ParsedRecipe | null>(null);

  const handleSelect = (updatedIngredients: string[]) => {
    setIngredients(updatedIngredients);
  };

  const handleRemove = (ingredient: string) => {
    setIngredients(ingredients.filter((ing) => ing !== ingredient));
  };

  const callMistral = async () => {
    if (ingredients.length === 0) return;
    setLoading(true);

    try {
      if (window.location.hostname === "localhost") {
        const fakeRecipe = `
        Titre de la recette : Salade √©tudiante express
        Temps de pr√©paration : 10 minutes
        Ingr√©dients :
        - 1 tomate
        - 1 bo√Æte de thon
        - 1 poign√©e de p√¢tes froides
        - Huile d'olive
        - Sel, poivre
        √âtapes de la pr√©paration :
        1. √âgoutter le thon.
        2. Couper la tomate en d√©s.
        3. M√©langer les p√¢tes, le thon et la tomate dans un bol.
        4. Ajouter un filet d'huile d'olive, du sel et du poivre.
        Astuces :
        - Ajoute du ma√Øs ou du fromage r√¢p√© si dispo.
        - Tu peux utiliser du riz √† la place des p√¢tes.
      `;
        const parsed = parseRecipe(fakeRecipe);
        setRecipe(parsed);
        return;
      }
      const res = await fetch("/api/test-key", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ ingredients }),
      });

      const data = await res.json();
      const parsed = parseRecipe(data.result);
      setRecipe(parsed);
    } catch (error) {
      console.error("Erreur c√¥t√© front:", error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <>
      <header>
        <h1>KeskonMange ? üçï</h1>
      </header>

      <main>
        <FilterSection
          ingredients={ingredients}
          setIngredients={setIngredients}
        />
        <section className="main-content">
          <div className="main-content-left">
            <IngredientSummary
              ingredients={ingredients}
              onRemove={handleRemove}
            />

            <button
              onClick={callMistral}
              style={{ marginTop: "20px" }}
              disabled={ingredients.length === 0 || loading}
              className="button-generate"
            >
              {loading ? "Chargement..." : "G√©n√©rer la recette üçΩÔ∏è"}
            </button>
          </div>

          {recipe && (
            <div className="div-result">
              <ButtonCopyPaste />

              <h2>üç¥ {recipe.title}</h2>
              <p>
                <strong>‚åõ Temps de pr√©paration :</strong> {recipe.time}
              </p>

              <h3>ü•ó Ingr√©dients :</h3>
              <ul>
                {recipe.ingredients.map((ing, idx) => (
                  <li key={idx}>{ing}</li>
                ))}
              </ul>

              <h3>üõ†Ô∏è Pr√©paration :</h3>
              <ol>
                {recipe.steps.map((step, idx) => (
                  <li key={idx}>{step}</li>
                ))}
              </ol>

              <h3>üí° Astuces :</h3>
              <ul>
                {recipe.tips.map((tip, idx) => (
                  <li key={idx}>{tip}</li>
                ))}
              </ul>
            </div>
          )}
        </section>
        {/* Composant recette */}
        {/* Tableau r√©capitulatif */}
      </main>

      <footer>armanceau github ...</footer>

      <IngredientInput
        ingredients={ingredients}
        setIngredients={setIngredients}
      />
      <br />
      <TagSelector ingredients={ingredients} onSelect={handleSelect} />
      <hr />
    </>
  );
};

export default App;
